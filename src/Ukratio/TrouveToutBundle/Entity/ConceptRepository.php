<?php

namespace Ukratio\TrouveToutBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Ukratio\TrouveToutBundle\Entity\Discriminator;
use Doctrine\ORM\QueryBuilder;
use Ukratio\TrouveToutBundle\Entity\Concept;
use Ukratio\ToolBundle\Service\ArrayHandling;

/**
 * ConceptRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConceptRepository extends EntityRepository
{

    private $arrayHandling;

    public function setArrayHandling(ArrayHandling $arrayHandling)
    {
        $this->arrayHandling = $arrayHandling;
    }

    public function findByResearch(Concept $research)
    {
        $queryBuilder = $this->createQueryBuilder('concept')
                             ->where('concept.type = :type')
                             ->setParameter('type', $research->getResearchedType());

        if($research->getResearchedLinkable() == 'linkable') {
            $queryBuilder->andWhere('concept.linkable = :linkable')
                         ->setParameter('linkable', true);
        }

        if($research->getResearchedLinkable() == 'unlinkable') {
            $queryBuilder->andWhere('concept.linkable = :linkable')
                         ->setParameter('linkable', false);
        }

        if($research->getResearchedName() != null) {
            $eqModule = $queryBuilder->expr()->eq('REGEXP(concept.name, :name)', '1');

            $matchEmpty = preg_match('#' . $research->getResearchedName() . '#', '') == 1;

            if($matchEmpty) {
                $orModule = $queryBuilder->expr()->orx();
                $orModule->add($queryBuilder->expr()->isNull("concept.name"));
                $orModule->add($eqModule);
                $queryBuilder->andWhere($orModule);
            } else {
                $queryBuilder->andWhere($eqModule);
            }

            $queryBuilder->setParameter('name', $research->getResearchedName());
        }


        if($research->getResearchedNumber() != null) {
            $queryBuilder->andWhere("REGEXP(concept.number, :number) = 1")
                         ->setParameter('number', $research->getResearchedNumber());
        }

        foreach($research->getMoreGeneralConcepts() as $category) {
            $queryBuilder = $this->whereHaveCategory($queryBuilder, $category);
        }

        foreach($research->getCaracts() as $caract) {
            $queryBuilder = $this->whereHaveCaract($queryBuilder, $caract);
        }

        return $queryBuilder->getQuery()->getResult();
    }

    public function findByIdWithCaract($id)
    {

        $queryBuilder = $this->createQueryBuilder('concept')
                             ->where('concept.id = :id')
                             ->setParameter('id', $id)
                             ->leftJoin('concept.caracts', 'caracts')
                             ->addSelect('caracts')
                             ->leftJoin('caracts.value', 'element')
                             ->addSelect('element')
                             ->leftJoin('concept.moreGeneralConceptConcepts', 'generalConcept')
                             ->addSelect('generalConcept');

        return $queryBuilder->getQuery()->getResult()[0];
    }


    public function count()
    {
        $querybuilder = $this->createQueryBuilder('a')
                             ->select('COUNT(a)');

        return (int) $querybuilder->getQuery()
                                  ->getSingleScalarResult();
    }

    public function findMoreGeneralCategories(Concept $concept)
    {
        $queryBuilder = $this->createQueryBuilder('concept')
                             ->leftJoin('concept.moreSpecificConceptConcepts', 'ConceptConcept')
                             ->where('ConceptConcept.moreSpecific = :id')
                             ->setParameter('id', $concept->getId());
        $queryBuilder = $this->whereIsCategory($queryBuilder);

        return $queryBuilder->getQuery()->getResult();
    }

    public function findAllCategories()
    {
        return $this->QueryBuilderAllCategories()->getQuery()->getResult();
    }

    public function QueryBuilderAllCategories()
    {
        $queryBuilder = $this->createQueryBuilder('concept');
        $queryBuilder = $this->whereIsCategory($queryBuilder);

        return $queryBuilder;
    }

    public function findUnamedResearches()
    {
        $queryBuilder = $this->createQueryBuilder('concept');
        $queryBuilder = $this->whereIsUnamedResearch($queryBuilder);

        return $queryBuilder->getQuery()->getResult();
    }

    public function findNamedSet()
    {
        $queryBuilder = $this->createQueryBuilder('concept');
        $queryBuilder = $this->whereIsNamedSet($queryBuilder);

        return $queryBuilder->getQuery()->getResult();
    }

    public function findLinkableSet()
    {
        $queryBuilder = $this->createQueryBuilder('concept');
        $queryBuilder = $this->whereIsLinkableSet($queryBuilder);

        return $queryBuilder->getQuery()->getResult();
    }

    public function QueryBuilderNamedSet()
    {
        $queryBuilder = $this->createQueryBuilder('concept');
        $queryBuilder = $this->whereIsNamedSet($queryBuilder);

        return $queryBuilder;
    }

    public function whereIsUnamedResearch(QueryBuilder $queryBuilder)
    {
        $queryBuilder->andWhere('concept.name is NULL');
        $queryBuilder = $this->whereIsResearch($queryBuilder);

        return $queryBuilder;
    }

    public function whereIsNamedSet(QueryBuilder $queryBuilder)
    {
        $queryBuilder->andWhere('concept.name is NOT NULL');
        $queryBuilder = $this->whereIsSet($queryBuilder);

        return $queryBuilder;
    }

    public function whereIsLinkableSet(QueryBuilder $queryBuilder)
    {
        $queryBuilder->andWhere('concept.linkable = :true')
                     ->setParameter('true', true);
        $queryBuilder = $this->whereIsSet($queryBuilder);

        return $queryBuilder;
    }

    public function whereIsSet(QueryBuilder $queryBuilder)
    {
        $queryBuilder->andWhere('concept.type = :type')
                     ->setParameter('type', Discriminator::$Set->getName());
        return $queryBuilder;
    }

    public function whereIsResearch(QueryBuilder $queryBuilder)
    {
        $queryBuilder->andWhere('concept.type = :type')
                     ->setParameter('type', Discriminator::$Research->getName());
        return $queryBuilder;
    }

    public function whereIsCategory(QueryBuilder $queryBuilder)
    {
        $queryBuilder->andWhere('concept.type = :type')
                     ->setParameter('type', Discriminator::$Category->getName());
        return $queryBuilder;
    }

    public function whereHaveCaract(QueryBuilder $queryBuilder, Caract $caract)
    {
        static $nbr = 0;
        $nbr++;
        $getValue = function (Element $element)
        {
            return $element->getValue();
        };

        $values = $caract->getAllMoreSpecificValues(-1);

        $queryBuilder->leftJoin('concept.caracts', "caracts$nbr")
                     /* ->addSelect("caracts$nbr") */
                     ->andWhere("REGEXP(caracts$nbr.name, :name) = 1")
                     ->setParameter('name', $caract->getName())
                     ->leftJoin("caracts$nbr.value", "value$nbr");
                     /* ->addSelect("value$nbr"); */

        if ($values != null) {
            $values = array_map($getValue, $values);
            $queryBuilder->andWhere("value$nbr.value IN (:values)")
                         ->setParameter('values', $values);
        }


        return $queryBuilder;
    }

    public function whereHaveCategory(QueryBuilder $queryBuilder, Concept $category)
    {
        static $nbr = 0;
        $nbr++;
        $getName = function (Concept $concept)
        {
            return $concept->getName();
        };

        $isCategory = function (Concept $concept)
        {
            return Discriminator::getEnumerator($concept->getType()) === Discriminator::$Category;
        };

        $categories = $category->getAllMoreSpecificConcepts(-1);
        $categories = array_filter($categories, $isCategory);
        $categories = array_map($getName, $categories);

        $queryBuilder->leftJoin('concept.moreGeneralConceptConcepts', "generalConceptConcepts$nbr")
                     ->addSelect("generalConceptConcepts$nbr")
                     ->leftJoin("generalConceptConcepts$nbr.moreGeneral", "generalConcept$nbr")
                     ->addSelect("generalConcept$nbr")
                     ->andWhere("generalConcept$nbr.name IN (:names)")
                     ->setParameter('names', $categories);

        return $queryBuilder;
    }
}
