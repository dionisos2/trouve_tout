<?php

namespace Ukratio\TrouveToutBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Ukratio\TrouveToutBundle\Entity\Discriminator;
use Doctrine\ORM\QueryBuilder;
use Ukratio\TrouveToutBundle\Entity\Concept;
use Ukratio\ToolBundle\Service\ArrayHandling;

/**
 * ConceptRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConceptRepository extends EntityRepository
{
    
    private $arrayHandling;
        
    public function setArrayHandling(ArrayHandling $arrayHandling)
    {
        $this->arrayHandling = $arrayHandling;
    }

    public function findByResearch(Concept $research)
    {
        $queryBuilder = $this->createQueryBuilder('concept')
                             ->where('concept.type = :type')
                             ->setParameter('type', $research->getResearchedType());

        if($research->getResearchedLinkable() == 'linkable') {
            $queryBuilder->andWhere('concept.linkable = :linkable')
                         ->setParameter('linkable', true);
        }

        if($research->getResearchedLinkable() == 'unlinkable') {
            $queryBuilder->andWhere('concept.linkable = :linkable')
                         ->setParameter('linkable', false);
        }
        
        if($research->getResearchedName() != null) {
            $queryBuilder->andWhere("REGEXP(concept.name, :name) = 1")
                         ->setParameter('name', $research->getResearchedName());
        }

        if($research->getResearchedNumber() != null) {
            $queryBuilder->andWhere("REGEXP(concept.number, :number) = 1")
                         ->setParameter('number', $research->getResearchedNumber());
        }

        foreach($research->getMoreGeneralConcepts() as $category) {
            /* $queryBuilder = $this->whereHaveCategory($queryBuilder, $category); */
        }
        
        return $queryBuilder->getQuery()->getResult();
    }

    public function findByIdWithCaract($id)
    {
        
        $queryBuilder = $this->createQueryBuilder('concept')
                             ->where('concept.id = :id')
                             ->setParameter('id', $id)
                             ->leftJoin('concept.caracts', 'caracts')
                             ->addSelect('caracts')
                             ->leftJoin('caracts.value', 'element')
                             ->addSelect('element')
                             ->leftJoin('concept.moreGeneralConceptConcepts', 'generalConcept')
                             ->addSelect('generalConcept');

        return $queryBuilder->getQuery()->getResult()[0];
    }


    public function count()
    {
        $querybuilder = $this->createQueryBuilder('a')
                             ->select('COUNT(a)');

        return (int) $querybuilder->getQuery()
                                  ->getSingleScalarResult();
    }

    public function findMoreGeneralCategories(Concept $concept)
    {
        $queryBuilder = $this->createQueryBuilder('concept')
                             ->leftJoin('concept.moreSpecificConceptConcepts', 'ConceptConcept')
                             ->where('ConceptConcept.moreSpecific = :id')
                             ->setParameter('id', $concept->getId());
        $queryBuilder = $this->whereIsCategory($queryBuilder);

        return $queryBuilder->getQuery()->getResult();
    }

    public function findAllCategories()
    {
        return $this->QueryBuilderAllCategories()->getQuery()->getResult();
    }

    public function QueryBuilderAllCategories()
    {
        $queryBuilder = $this->createQueryBuilder('concept');
        $queryBuilder = $this->whereIsCategory($queryBuilder);
        
        return $queryBuilder;
    }

    public function findNamedSet()
    {
        $queryBuilder = $this->createQueryBuilder('concept');
        $queryBuilder = $this->whereIsNamedSet($queryBuilder);
        
        return $queryBuilder->getQuery()->getResult();
    }

    public function findLinkableSet()
    {
        $queryBuilder = $this->createQueryBuilder('concept');
        $queryBuilder = $this->whereIsLinkableSet($queryBuilder);
        
        return $queryBuilder->getQuery()->getResult();
    }

    public function QueryBuilderNamedSet()
    {
        $queryBuilder = $this->createQueryBuilder('concept');
        $queryBuilder = $this->whereIsNamedSet($queryBuilder);
        
        return $queryBuilder;
    }

    public function whereIsNamedSet(QueryBuilder $queryBuilder)
    {
        $queryBuilder->andWhere('concept.name is NOT NULL');
        $queryBuilder = $this->whereIsSet($queryBuilder);

        return $queryBuilder;
    }

    public function whereIsLinkableSet(QueryBuilder $queryBuilder)
    {
        $queryBuilder->andWhere('concept.linkable = :true')
                     ->setParameter('true', true);
        $queryBuilder = $this->whereIsSet($queryBuilder);

        return $queryBuilder;
    }

    public function whereIsSet(QueryBuilder $queryBuilder)
    {
        $queryBuilder->andWhere('concept.type = :type')
                     ->setParameter('type', Discriminator::$Set->getName());
        return $queryBuilder;
    }

    public function whereIsCategory(QueryBuilder $queryBuilder)
    {
        $queryBuilder->andWhere('concept.type = :type')
                     ->setParameter('type', Discriminator::$Category->getName());
        return $queryBuilder;
    }

    public function whereHaveCategory(QueryBuilder $queryBuilder, Concept $category)
    {
        
        $queryBuilder->leftJoin('concept.moreGeneralConceptConcepts', 'generalConcept');
    }
}
